<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="../../../icons/TextProcVectors.png" type="Manipulator">
	<name>Document Vector Hashing</name>
	<shortDescription>Creates a document vector for each document using a
		hash function.
	</shortDescription>
	<fullDescription>
		<intro>
			This node creates a document vector for each document
			representing it in the terms space. The values of the feature vectors
			can be specified as boolean values or as values of either the
			relative frequency or the absolute frequency of the terms.
			The
			advantages of using this node instead of the normal document
			vector
			node is that the dimension of the vectors is always fixed and
			therefore this node is streamable.
		</intro>
		<option name="Document column">
			The column containing the documents to use.
		</option>
		<option name="Dimension">
			The dimension of the output document vector. The
			bigger the dimension, the less likely collisions would tend to
			happen. However, be aware of the curse of dimensionality.
		</option>
		<option name="Seed">
			Seed for the hashing function.
		</option>
		<option name="Hashing function">
			Choose which hashing function should be used to
			hash the document terms.
		</option>
		<option name="Vector type">
			There are three ways to fill the values in the document vector.
			<br />
			<b>Binary</b>
			: The vector will be a bit vector.
			<br />
			<b>TF-Absolute</b>
			: At each index where a term is hashed to, the value of the absolute
			term frequency of that term will calculated and stored at the index.
			<br />
			<b>TF-Relative</b>
			: At each index where a term is hashed to, the value of the relative
			term frequency of that term will calculated and stored at the index.
		</option>
		<option name="As collection cell">
			If checked all vector entries will be stored in a
			collection cell
			consisting of double cells. If not checked all double
			cells will be stored in corresponding columns. The advantage
			of the
			column representation is that most of the regular algorithms
			in KNIME
			can be applied. The disadvantage is (which is on the
			other hand the
			advantage of the collection representation) that
			processing of
			subsequent nodes will be slowed down, due to the many
			columns that
			will be created (dependent on the input data of
			course).
		</option>
	</fullDescription>

	<ports>
		<inPort name="Documents input table" index="0">The input table
			containing the documents.
		</inPort>
		<outPort name="Documents output table" index="0">An output table
			containing the input documents with the corresponding document
			vectors.
		</outPort>
		<outPort name="Model output" index="1">The model output 
			containing the specifications that have been used for document vector creation.
		</outPort>
	</ports>
</knimeNode>